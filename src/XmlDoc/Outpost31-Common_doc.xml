<!-- u241018 -->

<!--
    This file contains external XML documentation for common properties that are used throughout the Tingen web service.
-->

<Outpost31-Common>

    <!--
        Logging
    -->
    <Type name="Logging">

        <!-- TraceDelay -->
        <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="CommonProperty"]/TraceDelay/*'/> -->
        <TraceDelay>
            <remarks>
                <para>
                    Determines the delay, in milliseconds, between <b>Trace Log</b> writes.
                </para>
                <para>
                    Since Trace Logs may be written <i>extremely fast</i>, the <c>TraceDelay</c> setting can beused to slow down the log writing process, ensuring all logs are written.
                </para>
            </remarks>
            <value>
                The default is <c>10</c>. Increasing this value is not recommended, since it can have an adverse affect on performance.
            </value>
            <seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/Logging.md">Tingen Documentation: Logging</seealso>
        </TraceDelay>

        <!-- TraceLevel -->
        <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="CommonProperty"]/TraceLevel/*'/> -->
        <TraceLevel>
            <remarks>
                <para>
                    Determines the amount of <b>Trace Logs</b> that are generated.
                </para>
                <para>
                    The Trace Level can be be between <c>0</c> (disabled) and <c>9</c> (all Trace Logs are written).
                </para>
                <para>
                    Trace log levels are cumulative, meaning that a level <c>3</c> trace log will also write level <c>2</c> and level <c>1</c> trace logs.
                </para>
            </remarks>
            <value>
                If you aren't having any issues, you can set this to <c>0</c>, but keep in mind that the higher the number, the greater affect creating Trace Logs will have on performance.
            </value>
            <seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/Logging.md">Tingen Documentation: Logging</seealso>
        </TraceLevel>

    </Type>

    <!--
        Modes
    -->
    <Type name="Modes">

        <Mode> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Modes"]/Mode/*'/> -->
            <remarks>
                <para>
                    The following modes are available to Tingen and its individual Modules:
                    <list type="table">
                        <listheader>
                            <term>Mode</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>Enabled</term>
                            <description>Functionality is enabled.</description>
                        </item>
                        <item>
                            <term>Disabled</term>
                            <description>Functionality is disabled.</description>
                        </item>
                        <item>
                            <term>Passthrough</term>
                            <description>Functionality is enabled, but no changes are made (and log files are written).</description>
                        </item>
                    </list>
                </para>
                <para>
                    Please note:
                    <list type="bullet">
                        <item>Individual modules may have additional modes, which are documented in the module's documentation.</item>
                        <item>Disabling the Tingen web service will disable <i>all functionality</i>, including <i>all Module functionality</i>.
                        </item>
                    </list>
                </para>
            </remarks>
            <seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/Tingen-Modules.md">Tingen Documentation: Modules</seealso>
            <seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/Modes.md">Tingen Documentation: Modes</seealso>
        </Mode>

    </Type>

    <!--
        OptionObjects
    -->
    <Type name="OptionObjects">

        <!-- ReturnOptionObject -->
        <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="OptionObjects"]/ReturnOptionObject/*'/> -->
        <ReturnOptionObject>
            <remarks>
                <para>
                    The <c>ReturnOptionObject</c> is the data structure that is returned to Avatar, and contains any modifications made to the original data.<br/>
                    <br/>
                    Prior to returning the <c>ReturnOptionObject</c> to Avatar, it must be <i>finalized</i> via <see cref="Outpost31.Core.Avatar.ReturnObject.Finalize(Session.TingenSession, string, string)"/>.<br/>
                    <br/>
                    The finalization process verifies that the <c>ReturnOptionObject</c> is formatted correctly, and that all of the required information Avatar needs to accept the returned data is is present.
                </para>
            </remarks>
            <seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/OptionObject.md">Tingen Documentation: The OptionObject</seealso>
        </ReturnOptionObject>

        <!-- SentOptionObject -->
        <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="OptionObjects"]/SentOptionObject/*'/> -->
        <SentOptionObject>
            <remarks>
                <para>
                    The <c>SentOptionObject</c> is the original data structure that is sent from  Avatar to Tingen, and contains all of the <i>data</i> Tingen needs to do its work.<br/>
                    <br/>
                    It is important to note that the <c>SentOptionObject</c> is <i>never directly modified</i> by Tingen, since all modifications are made using the <see cref="WorkOptionObject"/>.
                </para>
            </remarks>
            <seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/OptionObject.md">Tingen Documentation: The OptionObject</seealso>
        </SentOptionObject>

        <!-- WorkOptionObject -->
        <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="OptionObjects"]/WorkOptionObject/*'/> -->
        <WorkOptionObject>
            <remarks>
                <para>
                    Any modifications made to the original data sent from Avatar are made in the <c>WorkOptionObject</c> data structure.<br/>
                    <br/>
                    The <c>WorkOptionObject</c> is not formatted correctly, nor does it contain the required information, to be returned to Avatar (that's the job of the <see cref="ReturnOptionObject"/>).
                </para>
            </remarks>
            <seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/OptionObject.md">Tingen Documentation: The OptionObject</seealso>
        </WorkOptionObject>

    </Type>

    <!--
        Other
    -->
    <Type name="Other">

        <NotImplemented> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Other"]/NotImplemented/*'/> -->
            <remarks>
                <para>
                    This functionality is not implemented (yet).
                </para>
            </remarks>
        </NotImplemented>

    </Type>

    <!--
        Paths
    -->
    <Type name="Paths">

        <Admin> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/Admin/*'/> -->
            <remarks>
                <para>
                    Admin data.
                </para>
                <para>
                    Examples of admin data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </Admin>

        <Alerts> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/Alerts/*'/> -->
            <remarks>
                <para>
                    Alert messages are used to notify the user of important information.
                </para>
                <para>
                    Examples of alerts include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </Alerts>

        <Archives> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/Archives/*'/> -->
            <remarks>
                <para>
                    Archived data
                </para>
                <para>
                    Examples of archived data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </Archives>

        <Configs> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/Configs/*'/> -->
            <remarks>
                <para>
                    Configuration data.
                </para>
                <para>
                    Examples of configuration data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </Configs>

        <CurrentSession> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/CurrentSession/*'/> -->
            <remarks>
                <para>
                    Reports are used to display data in a structured format.
                </para>
                <para>
                    Examples of reports include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </CurrentSession>

        <Debugging>  <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/Debugging/*'/> -->
            <remarks>
                <para>
                    Debugging data.
                </para>
                <para>
                    Examples of Debugging data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </Debugging>

        <Errors> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/Errors/*'/> -->
            <remarks>
                <para>
                    Error messages are used to notify the user of a problem that has occurred.
                </para>
                <para>
                    Examples of errors include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </Errors>

        <Exports> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/Exports/*'/> -->
            <remarks>
                <para>
                    Exported data.
                </para>
                <para>
                    Examples of exported data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </Exports>

        <FromAvatar> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/FromAvatar/*'/> -->
            <remarks>
                <para>
                    Data exported from Avatar.
                </para>
                <para>
                    Examples of data exported from Avatar include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </FromAvatar>

        <Logging>
            <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/Logging/*'/> -->
            <remarks>
                <para>
                    Logging data.
                </para>
                <para>
                    Examples of logging data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </Logging>

        <Primeval>
            <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/Primeval/*'/> -->
            <remarks>
                <para>
                    Primeval logging data.
                </para>
                <para>
                    Examples of primeval logging data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </Primeval>

        <Reports> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/Reports/*'/> -->
            <remarks>
                <para>
                    Reports are used to display data in a structured format.
                </para>
                <para>
                    Examples of reports include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </Reports>

        <Sessions> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/Sessions/*'/> -->
            <remarks>
                <para>
                    Session data
                </para>
                <para>
                    Examples of reports include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </Sessions>

        <Templates> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/Templates/*'/> -->
            <remarks>
                <para>
                    Templates
                </para>
                <para>
                    Examples of templates include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </Templates>

        <Temporary> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/Temporary/*'/> -->
            <remarks>
                <para>
                    Temporary data.
                </para>
                <para>
                    Examples of temporary data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </Temporary>

        <Warnings> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="Paths"]/Warnings/*'/> -->
            <remarks>
                <para>
                    Warning messages are used to notify the user of a potential problem.
                </para>
                <para>
                    Examples of warnings include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </Warnings>

    </Type>

    <!--
        ScriptLink
    -->
    <Type name="ScriptLink">

        <ScriptParameter> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="ScriptLink"]/ScriptParameter/*'/> -->
            <remarks>
                <para>
                    The <c>ScriptParameter</c> tells Tingen what work needs to be done, and how it should be done.
                </para>
                <para>
                    The Script Parameter will generally contain the following components:
                    <list type="table">
                        <listheader>
                            <term>Component</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>Module</term>
                            <description>
                                The <i>Tingen Module</i> that will do the work (e.g.: "Admin")
                            </description>
                        </item>
                        <item>
                            <term>Command</term>
                            <description>
                                The requested <i>command</i> (e.g.: "Service")
                            </description>
                        </item>
                        <item>
                            <term>Action</term>
                            <description>
                                The requested <i>action</i> (e.g.: "Update")
                            </description>
                        </item>
                        <item>
                            <term>Option</term>
                            <description>
                                The (optional) <i>option</i> (e.g.: "All")
                            </description>
                        </item>
                    </list>
                </para>
                <para>
                    Also:
                    <list type="bullet">
                        <item>
                            Some Script Parameters may not contain all of the above components, or may contain additional components that aren't listed.
                        </item>
                        <item>
                            All Script Parameter components are separated by a "<c>-</c>" character.
                        </item>
                        <item>
                            Script Parameters are pre-defined, so you can't just make up a new one and have it magically work. Sorry! You will need to use one of the <see href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/Script-Parameter.md">currently supported Script Parameters</see>.
                        </item>
                        <item>
                            Tingen converts Script Parameters to lowercase for easier parsing, so you can use whatever casing you like when creating a ScriptLink event.
                        </item>
                    </list>
                </para>
            </remarks>
            <example>
                To update all service information, the Script Parameter would be:
                <code>
                    Admin-Service-Update-All
                </code>
                And to verify that the current user is authorized to submit an open incident:
                <code>
                    OpenIncident-Verify-AuthorIsViewing
                </code>
            </example>
            <value>
                A valid "<c>-</c>" delimited string (e.g, "<c>Admin-Service-Update-All</c>")
            </value>
            <seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/Tingen-Modules.md">Tingen Documentation: Tingen Modules</seealso>
            <seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/Script-Parameter.md">Tingen Documentation: The Script Parameter</seealso>
            <seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/ScriptLink.md">Tingen Documentation: ScriptLink</seealso>
        </ScriptParameter>

    </Type>

    <!--
        System Codes
    -->
    <Type name="SystemCodes">

        <SystemCode> <!-- /// <include file='XmlDoc/Outpost31-Common_doc.xml' path='Outpost31-Common/Type[@name="SystemCodes"]/SystemCode/*'/> -->
            <remarks>
                <para>
                    The Tingen works with a single Avatar environment at a time, defined by oneof the following Avatar <c>System Codes</c>:
                    <list type="table">
                        <listheader>
                            <term>System Code</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>LIVE</term>
                            <description>The Production environment</description>
                        </item>
                        <item>
                            <term>UAT</term>
                            <description>The User Acceptance Testing environment</description>
                        </item>
                    </list>
                </para>
                <para>
                    Your organization may have additional Avatar environments, but Tingen is only designed/tested to work with the above System Codes.
                </para>
            </remarks>
            <value>
                This should be <c>LIVE</c> for production environments, and <c>UAT</c> for testing environments.
            </value>
        </SystemCode>

    </Type>

</Outpost31-Common>
<!--
    u241031

    This is the external XML Documentation file for the Outpost31.Core.Avatar.ReturnObject class.
-->

<Outpost31.Core.Avatar.ReturnObject>

    <!-- Classes  -->
    <Type name="Class">

        <!-- ReturnObject.cs -->
        <ReturnObject>
            <remarks>
                <para>
                    This class does various things with the <see cref="Outpost31.Core.Avatar.AvatarData.ReturnOptionObject"/> data structure, including:
                    <list type="bullet">
                        <item>Finalizes the <c>ReturnOptionObject</c>, so it can be returned to Avatar</item>
                    </list>
                </para>
            </remarks>
            <seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </ReturnObject>

    </Type>

    <!-- Properties -->
    <Type name="Property">
        <!-- Properties for this class are defined in the common file. -->
    </Type>

    <!-- Methods -->
    <Type name="Method">

        <!-- Finalize() -->
        <Finalize>
            <remarks>
                <para>
                    Before returning an OptionObject data structure to Avatar, it must be formatted properly, and contain all required information. The <c>Finalize</c> process takes care of those things by:
                    <list type="number">
                        <item>Cloning the <see cref="Outpost31.Core.Avatar.AvatarData.ReturnOptionObject"/> the <see cref="Outpost31.Core.Avatar.AvatarData.WorkOptionObject"/></item>
                        <item>Assigning a valid <i>error code</i> to the returnOptionObject</item>
                        <item>Assigning an <i>error message</i> to the returnOptionObject</item>
                        <item>Verifying the returnOptionObject contains all required data</item>
                    </list>
                    The OptionObject expects an error code of type <c>int</c>, but to make it more readable, Tingen works with the following "error strings" (which will then be converted to an <c>int</c>):
                    <list type="table">
                        <listheader>
                            <term>Error string</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>"clone",<br/>"none",<br/> "success" </term>
                            <description>Returns the OptionObject without a message (error code <c>0</c>)</description>
                        </item>
                        <item>
                            <term>"error"</term>
                            <description> Stops the script from processing and displays an message with an "OK" button (error code <c>1</c>)</description>
                        </item>
                        <item>
                            <term>"okcancel"</term>
                            <description>Displays a message with "OK" and "Cancel" buttons (error code <c>2</c>)</description>
                        </item>
                        <item>
                            <term>"info"</term>
                            <description>Displays an informational warning message with an "OK" button (error code <c>3</c>) </description>
                        </item>
                        <item>
                            <term>"yesno"</term>
                            <description>Displays a message with "Yes" and "No" buttons (error code <c>4</c>)</description>
                        </item>
                        <item>
                            <term>"openurl"</term>
                            <description>Opens an URL in a browser (error code <c>5</c>)</description>
                        </item>
                        <item>
                            <term>"openform"</term>
                            <description>Presents an OK/Cancel dialog to open a form (error code <c>6</c>)<br/></description>
                        </item>
                    </list>
                    <b>NOTE:</b> The <c>openform</c> error string can only be used on Form Load and Field events.
                </para>
            </remarks>
            <example>
                To stop a script from processing and display an error message with an "OK" button:
                <code>
                    Outpost31.Core.Avatar.ReturnObject.Finalize(tnSession, "error", "There was an error!");
                </code>
                To pause a script and ask if the user wants to continue:
                <code>
                    Outpost31.Core.Avatar.ReturnObject.Finalize(tnSession, "yesno", "You might want to check your data. Do you want to continue?");
                </code>
                To display an informational message:
                <code>
                    Outpost31.Core.Avatar.ReturnObject.Finalize(tnSession, "info", "Have a nice day!");
                </code>
            </example>
        </Finalize>

    </Type>

</Outpost31.Core.Avatar.ReturnObject>